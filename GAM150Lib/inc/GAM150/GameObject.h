// ---------------------------------------------------------------------------
// Project Name		:	Alpha Engine
// File Name		:	GameObject.h
// Author			:	Thomas Komair
// Creation Date	:	2015/02/04
// Purpose			:	Header for Game Object - This is the first implementation of the game object class
//						for the ObjectManager
// History			:
// ---------------------------------------------------------------------------
#ifndef GAME_OBJECT_H_
#define GAME_OBJECT_H_

#include <AEEngine.h>

class RenderLayer;
// Defines basic data for generic game objects
struct GameObject
{
	// ------------------------------------------------------------------------
	// DATA MEMBERS

	// Name
	u32				mId;			// Integer Id generated by the ObjectManager when created. Guaranteed to be unique.
	std::string		mName;			// STD string. This is used as a const char * and contains the name of the game object. Doesn't have to be unique

	// Management
	bool			mbActive;		// Specifies whether the object should be updated or not.
	bool			mbAlive;		// Specifies whether the object is alive or not.
	bool			mbVisible;		// Specifies whether the object should be rendered or not.
	
	// Transform
	AEVec2			mPosition;		// Position: Use with AEMtx33Trans(...) to generate translation matrix.
	AEVec2			mScale;			// Scale: Use with AEMtx33Scale(...) to generate scaling matrix.
	f32				mRotation;		// Rotation (in rads): Use with AEMtx33Rot(...) to generate rotation matrix.

	// Graphics
	AEGfxTriList*	mpMesh;			// Pointer to mesh resource (can be shared with other game objects). Use with AEGfxTriDraw to draw.
	AEGfxTexture*	mpTex;			// Pointer to texture resource (can be shared with other game objects). Use with AEGfxTextureSet before calling AEGfxTriDraw to apply when drawing.
	bool			mbUseModColor;	// Boolean to determine whether the modulation color should be used. (false by default). 
	u32				mColor;			// Color to use when there are no textures. This value is per object. 
	RenderLayer*	mpRenderLayer;	// (NEW - LAB 6) render layer in which this object is contained.
	f32				mZorder;		// (NEW - LAB 6) render layer in which this object is contained.

	// ------------------------------------------------------------------------
	// MEMBER FUNCTIONS

	// Default Constructor - Sets data members to default value
	GameObject();

	// Default state functions
	virtual void Initialize();		// Inititializes the game object internal data. 
	virtual void Shutdown();		// Terminates the game object - does nothing for now. 
	virtual void Update();			// Update function - for this lab, it will only rotate by 15 degrees per second (not per frame). 
	virtual void Render(AEMtx33 * camMtx = NULL);	// (NEW - LAB 4)Draws the game object using the camera matrix

};

typedef std::list<GameObject*> OBJECT_PTR_LIST;

// ---------------------------------------------------------------------------
#endif